{"version":3,"file":"static/js/610.b8b3c742.chunk.js","mappings":"0LACA,G,QAAA,CAAgB,QAAU,yBAAyB,cAAgB,+BAA+B,KAAO,sBAAsB,cAAgB,+BAA+B,WAAa,4BAA4B,YAAc,+B,UCArO,EAAuB,mBAAvB,EAAuD,yBAAvD,EAA6F,yBAA7F,EAAqI,2BAArI,EAAmL,+B,SCqBnL,EAbiC,SAACA,GAC9B,OACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAOC,UAClBC,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACJ,UAAWC,EAAcI,GAAI,YAAcP,EAAMQ,GAAGJ,SAAA,EACzDH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAeC,UAC3BH,EAAAA,EAAAA,KAAA,OAAKQ,IAAI,MAAMP,UAAWC,EAAoBO,IAAKV,EAAMW,iBAE7DV,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAaC,SAAEJ,EAAMY,WAInD,ECnBA,GAAiB,ECajB,EARqC,SAACZ,GAClC,OACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAAA,QAAUC,SACrBJ,EAAMa,MAGlB,E,UCgBMC,GAAsBC,E,OAAAA,GAAiC,CACzDC,KAAM,wBADkBD,EAhBsE,SAACf,GAC/F,OACIK,EAAAA,EAAAA,MAAA,QAAMH,UAAWC,EAAAA,WAAcc,SAAUjB,EAAMkB,aAAad,SAAA,EACxDH,EAAAA,EAAAA,KAACkB,EAAAA,EAAK,CAACC,UAAW,QACdC,YAAa,aACbT,KAAM,iBACNV,UAAWC,EAAAA,eACfF,EAAAA,EAAAA,KAAA,UACIW,KAAM,aACNV,UAAWC,EAAAA,UAAYC,SAAC,WAKxC,IAuCA,EA5BwC,SAACJ,GAErC,IAIIsB,EAAetB,EAAMuB,aAAaC,MAAMC,KACvC,SAAAC,GAAI,OAAIzB,EAAAA,EAAAA,KAAC0B,EAAI,CAACf,KAAMc,EAAKd,KAAoBJ,GAAIkB,EAAKlB,GAAIG,YAAae,EAAKf,aAAxCe,EAAKlB,GAAkD,IAC5FoB,EAAmB5B,EAAMuB,aAAaM,SAASJ,KAC9C,SAAAK,GAAE,OAAI7B,EAAAA,EAAAA,KAAC8B,EAAO,CAAClB,KAAMiB,EAAGjB,MAAWiB,EAAGtB,GAAM,IAEjD,OACIH,EAAAA,EAAAA,MAAA,WAASH,UAAWC,EAAAA,QAAUC,SAAA,EAC1BH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,cAAgBC,UAC5BH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAAA,YAAcC,SACxBkB,OAGTjB,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAAA,cAAgBC,SAAA,EAC5BH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAAA,KAAOC,SACjBwB,KAEL3B,EAAAA,EAAAA,KAACa,EAAmB,CAACG,SApBf,SAACe,GACfhC,EAAMiC,YAAYD,EAASE,eAC/B,SAsBJ,E,UClDA,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAPoB,SAACC,GACrB,MAAO,CACHd,aAAcc,EAAMd,aAE5B,GAG6B,CACrBU,YAAaK,EAAAA,EAAAA,cAFrB,CAIEC,E","sources":["webpack://react-first-project/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://react-first-project/./src/components/Dialogs/Item/Item.module.css?d5ee","components/Dialogs/Item/Item.tsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Y07Er\",\"dialogs__list\":\"Dialogs_dialogs__list__Q-6U1\",\"chat\":\"Dialogs_chat__2Zt+E\",\"dialogs__chat\":\"Dialogs_dialogs__chat__XYH2h\",\"chat__form\":\"Dialogs_chat__form__6qiCW\",\"chat__input\":\"Dialogs_chat__input__KYd-P\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Item_item__TOPRN\",\"item__link\":\"Item_item__link__XriQg\",\"item__name\":\"Item_item__name__UKzss\",\"item__avatar\":\"Item_item__avatar__fdNsw\",\"item__avatar_img\":\"Item_item__avatar_img__cW8V4\"};","import { NavLink } from 'react-router-dom';\r\nimport c from './Item.module.css'\r\n\r\ntype propsType = {\r\n    id: number\r\n    avatarPhoto: string\r\n    name: string\r\n}\r\n\r\nconst Item:React.FC<propsType> = (props) => {\r\n    return (\r\n        <li className={c.item}>\r\n            <NavLink className={c.item__link} to={\"/dialogs/\" + props.id}>\r\n                <div className={c.item__avatar}>\r\n                    <img alt='aaa' className={c.item__avatar_img} src={props.avatarPhoto}></img>\r\n                </div>\r\n                <p className={c.item__name}>{props.name}</p>\r\n            </NavLink>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Item;","// extracted by mini-css-extract-plugin\nexport default {};","import c from './Message.module.css'\r\n\r\ntype propsType = {\r\n    text: string\r\n}\r\n\r\nconst Message: React.FC<propsType> = (props) => {\r\n    return (\r\n        <li className={c.message}>\r\n           {props.text}\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport c from './Dialogs.module.css';\r\nimport Item from './Item/Item';\r\nimport Message from './Message/Message';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { initializeStateType } from '../../redux/messagesReducer';\r\n\r\ntype messageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\ntype propsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<messageFormValuesType, propsType> & propsType> = (props) => {\r\n    return (\r\n        <form className={c.chat__form} onSubmit={props.handleSubmit}>\r\n            <Field component={'input'}\r\n                placeholder={'message...'}\r\n                name={'newMessageText'}\r\n                className={c.chat__input} />\r\n            <button\r\n                name={'sendButton'}\r\n                className={c.chat__btn}>\r\n                send\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<messageFormValuesType>({\r\n    form: 'dialogAddMessageForm'\r\n}) (AddMessageForm)\r\n\r\ntype ownPropsType = {\r\n    messagesPage: initializeStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<ownPropsType> = (props) => {\r\n\r\n    let sendMessage = (formData:any) => {\r\n        props.sendMessage(formData.newMessageText)\r\n    };\r\n\r\n    let userElements = props.messagesPage.users.map\r\n        (user => <Item name={user.name} key={user.id} id={user.id} avatarPhoto={user.avatarPhoto} />);\r\n    let messagesELements = props.messagesPage.messages.map\r\n        (el => <Message text={el.text} key={el.id} />);\r\n\r\n    return (\r\n        <section className={c.dialogs}>\r\n            <div className={c.dialogs__list}>\r\n                <ul className={c.list__items}>\r\n                    {userElements}\r\n                </ul>\r\n            </div>\r\n            <div className={c.dialogs__chat}>\r\n                <ul className={c.chat}>\r\n                    {messagesELements}\r\n                </ul>\r\n                <AddMessageReduxForm onSubmit = {sendMessage}/>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Dialogs;","import { actions } from '../../redux/messagesReducer';\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirectComponent } from '../../HOC/withAuthRedirect.js';\r\nimport { compose } from 'redux';\r\nimport { appStateType } from '../../redux/reduxStore';\r\n\r\nconst mapStateToProps = (state:appStateType) => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        sendMessage: actions.sendMessage\r\n    }),\r\n)(Dialogs)\r\n\r\n// withAuthRedirectComponent(connect(mapStateToProps, mapDispatchToProps) (Dialogs));"],"names":["props","_jsx","className","c","children","_jsxs","NavLink","to","id","alt","src","avatarPhoto","name","text","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","userElements","messagesPage","users","map","user","Item","messagesELements","messages","el","Message","formData","sendMessage","newMessageText","compose","connect","state","actions","Dialogs"],"sourceRoot":""}